import torch
from torch import tensor
import torch.nn as nn
from torch.nn import *
import torchvision
import torchvision.models as models
from torchvision.ops.stochastic_depth import stochastic_depth
import time
import builtins
import operator

class M(torch.nn.Module):
    def __init__(self):
        super(M, self).__init__()
        self.conv2d0 = Conv2d(3, 64, kernel_size=(3, 3), stride=(2, 2))
        self.relu0 = ReLU(inplace=True)
        self.maxpool2d0 = MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
        self.conv2d1 = Conv2d(64, 16, kernel_size=(1, 1), stride=(1, 1))
        self.relu1 = ReLU(inplace=True)
        self.conv2d2 = Conv2d(16, 64, kernel_size=(1, 1), stride=(1, 1))
        self.relu2 = ReLU(inplace=True)
        self.conv2d3 = Conv2d(16, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        self.relu3 = ReLU(inplace=True)
        self.conv2d4 = Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
        self.relu4 = ReLU(inplace=True)
        self.conv2d5 = Conv2d(16, 64, kernel_size=(1, 1), stride=(1, 1))
        self.relu5 = ReLU(inplace=True)
        self.conv2d6 = Conv2d(16, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        self.relu6 = ReLU(inplace=True)
        self.maxpool2d1 = MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
        self.conv2d7 = Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
        self.relu7 = ReLU(inplace=True)
        self.conv2d8 = Conv2d(32, 128, kernel_size=(1, 1), stride=(1, 1))
        self.relu8 = ReLU(inplace=True)
        self.conv2d9 = Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        self.relu9 = ReLU(inplace=True)
        self.conv2d10 = Conv2d(256, 32, kernel_size=(1, 1), stride=(1, 1))
        self.relu10 = ReLU(inplace=True)
        self.conv2d11 = Conv2d(32, 128, kernel_size=(1, 1), stride=(1, 1))
        self.relu11 = ReLU(inplace=True)
        self.conv2d12 = Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        self.relu12 = ReLU(inplace=True)
        self.maxpool2d2 = MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
        self.conv2d13 = Conv2d(256, 48, kernel_size=(1, 1), stride=(1, 1))
        self.relu13 = ReLU(inplace=True)
        self.conv2d14 = Conv2d(48, 192, kernel_size=(1, 1), stride=(1, 1))
        self.relu14 = ReLU(inplace=True)
        self.conv2d15 = Conv2d(48, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        self.relu15 = ReLU(inplace=True)
        self.conv2d16 = Conv2d(384, 48, kernel_size=(1, 1), stride=(1, 1))
        self.relu16 = ReLU(inplace=True)
        self.conv2d17 = Conv2d(48, 192, kernel_size=(1, 1), stride=(1, 1))
        self.relu17 = ReLU(inplace=True)
        self.conv2d18 = Conv2d(48, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        self.relu18 = ReLU(inplace=True)
        self.conv2d19 = Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1))
        self.relu19 = ReLU(inplace=True)
        self.conv2d20 = Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1))
        self.relu20 = ReLU(inplace=True)
        self.conv2d21 = Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        self.relu21 = ReLU(inplace=True)
        self.conv2d22 = Conv2d(512, 64, kernel_size=(1, 1), stride=(1, 1))
        self.relu22 = ReLU(inplace=True)
        self.conv2d23 = Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1))
        self.relu23 = ReLU(inplace=True)
        self.conv2d24 = Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        self.relu24 = ReLU(inplace=True)
        self.dropout0 = Dropout(p=0.5, inplace=False)
        self.conv2d25 = Conv2d(512, 1000, kernel_size=(1, 1), stride=(1, 1))
        self.relu25 = ReLU(inplace=True)
        self.adaptiveavgpool2d0 = AdaptiveAvgPool2d(output_size=(1, 1))

    def forward(self, x):
        x0=x
        x1=self.conv2d0(x0)
        x2=self.relu0(x1)
        x3=self.maxpool2d0(x2)
        x4=self.conv2d1(x3)
        x5=self.relu1(x4)
        x6=self.conv2d2(x5)
        x7=self.relu2(x6)
        x8=self.conv2d3(x5)
        x9=self.relu3(x8)
        x10=torch.cat([x7, x9], 1)
        x11=self.conv2d4(x10)
        x12=self.relu4(x11)
        x13=self.conv2d5(x12)
        x14=self.relu5(x13)
        x15=self.conv2d6(x12)
        x16=self.relu6(x15)
        x17=torch.cat([x14, x16], 1)
        x18=self.maxpool2d1(x17)
        x19=self.conv2d7(x18)
        x20=self.relu7(x19)
        x21=self.conv2d8(x20)
        x22=self.relu8(x21)
        x23=self.conv2d9(x20)
        x24=self.relu9(x23)
        x25=torch.cat([x22, x24], 1)
        x26=self.conv2d10(x25)
        x27=self.relu10(x26)
        x28=self.conv2d11(x27)
        x29=self.relu11(x28)
        x30=self.conv2d12(x27)
        x31=self.relu12(x30)
        x32=torch.cat([x29, x31], 1)
        x33=self.maxpool2d2(x32)
        x34=self.conv2d13(x33)
        x35=self.relu13(x34)
        x36=self.conv2d14(x35)
        x37=self.relu14(x36)
        x38=self.conv2d15(x35)
        x39=self.relu15(x38)
        x40=torch.cat([x37, x39], 1)
        x41=self.conv2d16(x40)
        x42=self.relu16(x41)
        x43=self.conv2d17(x42)
        x44=self.relu17(x43)
        x45=self.conv2d18(x42)
        x46=self.relu18(x45)
        x47=torch.cat([x44, x46], 1)
        x48=self.conv2d19(x47)
        x49=self.relu19(x48)
        x50=self.conv2d20(x49)
        x51=self.relu20(x50)
        x52=self.conv2d21(x49)
        x53=self.relu21(x52)
        x54=torch.cat([x51, x53], 1)
        x55=self.conv2d22(x54)
        x56=self.relu22(x55)
        x57=self.conv2d23(x56)
        x58=self.relu23(x57)
        x59=self.conv2d24(x56)
        x60=self.relu24(x59)
        x61=torch.cat([x58, x60], 1)
        x62=self.dropout0(x61)
        x63=self.conv2d25(x62)
        x64=self.relu25(x63)
        x65=self.adaptiveavgpool2d0(x64)
        x66=torch.flatten(x65, 1)
        return [x66]

m = M().eval()
x = torch.randn(1, 3, 224, 224)
start = time.time()
output = m(x)
end = time.time()
print(end-start)
